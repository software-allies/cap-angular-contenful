{"version":3,"sources":["ng://cap-angular-contentful/lib/services/config.service.ts","ng://cap-angular-contentful/lib/services/contentful.service.ts","ng://cap-angular-contentful/lib/contentful.module.ts"],"names":["data","this","space_id","environment","delivery_accessToken","CapContentfulService","_http","credentials","httpOptions","headers","HttpHeaders","Authorization","Content-Type","observe","baseUrl","prototype","getItems","contentType","limit","skip","_this","_url","get","pipe","map","response","body","tap","catchError","error","handleError","getItemById","entryId","console","throwError","getElementsByContentType","getAsset","assetId","core","ɵɵinject","http","HttpClient","ConfigService","factory","ɵfac","CapContentfulModule","forRoot","config","ngModule","providers","provide","useValue","imports","HttpClientModule","CommonModule"],"mappings":"8gBAQE,SAAoBA,GAAAC,KAAAD,KAAAA,EAJpBC,KAAAC,SAAmB,GACnBD,KAAAE,YAAsB,GACtBF,KAAAG,qBAA+B,GAIzBH,KAAKD,OACPC,KAAKC,SAAWD,KAAKD,KAAKE,SAC1BD,KAAKE,YAAcF,KAAKD,KAAKG,YAC7BF,KAAKG,qBAAuBH,KAAKD,KAAKI,oCCA1C,SAAAC,EACUC,EACAC,GADAN,KAAAK,MAAAA,EACAL,KAAAM,YAAAA,EACHA,IACDN,KAAKO,YAAc,CACjBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,cAAiB,UAAUJ,EAAYH,qBACvCQ,eAAgB,gDAElBC,QAAS,YAEXZ,KAAKa,QAAU,qCAAqCb,KAAKM,YAAYL,SAAQ,iBAAiBD,KAAKM,YAAYJ,YAAW,YAWhIE,EAAAU,UAAAC,SAAA,SAASC,EAAqBC,EAAgBC,GAA9C,IAAAC,EAAAnB,KACUiB,EAARA,GAAgC,IACzBC,EAAPA,GAA4B,EAC5B,IAAME,EAAUpB,KAAKa,QAAO,wBAAwBG,EAAW,UAAUC,EAAK,SAASC,EACvF,OAAOlB,KAAKK,MAAMgB,IAASD,EAAMpB,KAAKO,aACnCe,KACCC,EAAAA,KAAI,SAACC,GAAkB,OAAAA,EAASC,QAChCC,EAAAA,KAAI,SAACF,GAEH,OAAOA,KAETG,EAAAA,YAAW,SAAAC,GAAS,OAAAT,EAAKU,YAAYD,QAQ3CxB,EAAAU,UAAAgB,YAAA,SAAYC,GAAZ,IAAAZ,EAAAnB,KACMoB,EAAUpB,KAAKa,QAAO,WAAWkB,EAErC,OAAO/B,KAAKK,MAAMgB,IAASD,EAAMpB,KAAKO,aACnCe,KACCC,EAAAA,KAAI,SAACC,GAAkB,OAAAA,EAASC,QAChCC,EAAAA,KAAI,SAACF,GAAkB,OAAAA,KACvBG,EAAAA,YAAW,SAAAC,GAAS,OAAAT,EAAKU,YAAYD,QAInCxB,EAAAU,UAAAe,YAAR,SAAoBD,GAElB,OADAI,QAAQJ,MAAMA,GACPK,EAAAA,WAAWL,GAAS,iBAS7BxB,EAAAU,UAAAoB,yBAAA,SAAyBlB,EAAqBC,EAAgBC,GAA9D,IAAAC,EAAAnB,KACUiB,EAARA,GAAgC,IACzBC,EAAPA,GAA4B,EAC5B,IAAIE,EAAUpB,KAAKa,QAAO,wBAAwBG,EAAW,UAAUC,EAAK,SAASC,EACrF,OAAOlB,KAAKK,MAAMgB,IAASD,EAAMpB,KAAKO,aACnCe,KACCC,EAAAA,KAAI,SAACC,GAAkB,OAAAA,EAASC,QAChCC,EAAAA,KAAI,SAACF,GAAkB,OAAAA,KACvBG,EAAAA,YAAW,SAAAC,GAAS,OAAAT,EAAKU,YAAYD,QAQ3CxB,EAAAU,UAAAqB,SAAA,SAASC,GAAT,IAAAjB,EAAAnB,KACMoB,EAAUpB,KAAKa,QAAO,UAAUuB,EAEpC,OAAOpC,KAAKK,MAAMgB,IAASD,EAAMpB,KAAKO,aACnCe,KACCC,EAAAA,KAAI,SAACC,GAAkB,OAAAA,EAASC,QAChCE,EAAAA,YAAW,SAAAC,GAAS,OAAAT,EAAKU,YAAYD,yCA1FhCxB,GAAoBiC,EAAAC,SAAAC,EAAAC,YAAAH,EAAAC,SAAAG,yCAApBrC,EAAoBsC,QAApBtC,EAAoBuC,yBCDjC,SAAAC,YAaSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT,CACEC,QAASR,EACTS,SAAUJ,sCAPPF,iEAAAA,IAAmBI,UALnB,CACT5C,GACD+C,QAAA,CAPQ,CACPC,EAAAA,iBACAC,EAAAA,uFAQST,EAAmB,CAAAO,QAAA,CAT5BC,EAAAA,iBACAC,EAAAA","sourcesContent":["import ConfigInterface from '../interfaces/config.interface';\nimport { Injectable } from '@angular/core';\n\nexport class ConfigService {\n  space_id: string = '';\n  environment: string = '';\n  delivery_accessToken: string = '';\n\n  constructor(private data: ConfigInterface) {\n\n    if (this.data) {\n      this.space_id = this.data.space_id;\n      this.environment = this.data.environment;\n      this.delivery_accessToken = this.data.delivery_accessToken;\n\n    }\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { ConfigService } from './config.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\n\nexport class CapContentfulService {\n\n  private baseUrl: string;\n  private httpOptions: any;\n\n  constructor(\n    private _http: HttpClient,\n    private credentials: ConfigService) {\n      if(credentials){\n        this.httpOptions = {\n          headers: new HttpHeaders({\n            'Authorization': `Bearer ${credentials.delivery_accessToken}`,\n            'Content-Type': 'application/vnd.contentful.delivery.v1+json'\n          }),\n          observe: \"response\"\n        };\n        this.baseUrl = `https://cdn.contentful.com/spaces/${this.credentials.space_id}/environments/${this.credentials.environment}/`;\n      }\n  }\n\n\n  /**\n * Return the items related with a specific content type\n * @param contentType String\n * @param limit Optional(Number)\n * @param skip Optional(Number)\n*/\n  getItems(contentType: string, limit?: number, skip?: number): Observable<any> {\n    limit ? limit = limit : limit = 100;\n    skip ? skip = skip : skip = 0;\n    const _url = `${this.baseUrl}entries?content_type=${contentType}&limit=${limit}&skip=${skip}`;\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => {\n\n          return response;\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  /**\n * Return a specific item by Id\n * @param entryId String\n*/\n  getItemById(entryId: string): Observable<any> {\n    let _url = `${this.baseUrl}entries/${entryId}`\n\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => response),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error || 'Server error');\n  }\n\n  /**\n * Return a list of items related with a specific content type\n * @param contentType String\n * @param limit Optional(Number)\n * @param skip Optional(Number)\n*/\n  getElementsByContentType(contentType: string, limit?: number, skip?: number) {\n    limit ? limit = limit : limit = 100;\n    skip ? skip = skip : skip = 0;\n    let _url = `${this.baseUrl}entries?content_type=${contentType}&limit=${limit}&skip=${skip}`\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => response),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  /**\n * Return an item related with a specific assetId\n * @param assetId String\n*/\n  getAsset(assetId: string) {\n    let _url = `${this.baseUrl}assets/${assetId}`;\n\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        catchError(error => this.handleError(error))\n      );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ConfigService } from './services/config.service';\nimport { CommonModule } from \"@angular/common\";\nimport ConfigInterface from './interfaces/config.interface';\nimport { CapContentfulService } from './services/contentful.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    HttpClientModule,\n    CommonModule,\n  ],\n  exports: [],\n  providers: [\n    CapContentfulService\n  ],\n  schemas: []\n})\nexport class CapContentfulModule {\n  static forRoot(config: ConfigInterface): ModuleWithProviders {\n    return {\n      ngModule: CapContentfulModule,\n      providers: [\n        {\n          provide: ConfigService,\n          useValue: config\n        },\n      ]\n    };\n  }\n}\n\n"]}